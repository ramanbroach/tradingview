//@version=6
indicator("Raman's - Extended Candlestick Patterns", overlay = true, shorttitle = "Extended Candles")

//──────────────────────────────
// Basic Pattern Inputs (existing patterns)
//──────────────────────────────
hammerInput         = input.bool(true, title = "Hammer")
hangingManInput     = input.bool(true, title = "Hanging Man")
marubozuInput       = input.bool(true, title = "Marubozu")
engulfingInput      = input.bool(true, title = "Engulfing")
darkCloudCoverInput = input.bool(true, title = "Dark Cloud Cover")
piercingInput       = input.bool(true, title = "Piercing")
morningStarInput    = input.bool(true, title = "Morning Star")
eveningStarInput    = input.bool(true, title = "Evening Star")
shootingStarInput   = input.bool(true, title = "Shooting Star")
invertedHammerInput = input.bool(true, title = "Inverted Hammer")

//──────────────────────────────
// New Pattern Inputs
//──────────────────────────────
bullishHaramiInput           = input.bool(true, title = "Bullish Harami")
bearishHaramiInput           = input.bool(true, title = "Bearish Harami")
tweezerTopsInput             = input.bool(true, title = "Tweezer Tops")
tweezerBottomsInput          = input.bool(true, title = "Tweezer Bottoms")
bullishBeltHoldInput         = input.bool(true, title = "Bullish Belt Hold")
bearishBeltHoldInput         = input.bool(true, title = "Bearish Belt Hold")
upsideGapTwoCrowsInput       = input.bool(true, title = "Upside Gap Two Crows")
threeBlackCrowsInput         = input.bool(true, title = "Three Black Crows")
threeAdvWhiteSoldiersInput   = input.bool(true, title = "Three Advancing White Soldiers")
threeMountainsInput          = input.bool(true, title = "Three Mountains")
threeRiversInput             = input.bool(true, title = "Three Rivers")
counterAttackInput           = input.bool(true, title = "Counter Attack")
towerTopInput                = input.bool(true, title = "Tower Top")
towerBottomsInput            = input.bool(true, title = "Tower Bottoms")

//──────────────────────────────
// Candle Component Calculations
//──────────────────────────────
realBody      = math.abs(close - open)
upperShadow   = high - math.max(close, open)
lowerShadow   = math.min(close, open) - low
candleRange   = high - low
adjRealBody   = realBody == 0 ? 0.001 : realBody

//──────────────────────────────
// Standard Trend Logic using a 21-Period EMA for Price and Volume
//──────────────────────────────
ema21    = ta.ema(close, 21)
volEMA21 = ta.ema(volume, 21)
// Trend conditions require the price to be on the proper side of the 21-EMA
// and the current volume to be above its 21-EMA.
bullishTrend = close < ema21 and volume > volEMA21   // Downtrend with strong volume (favorable for bullish reversal)
bearishTrend = close > ema21 and volume > volEMA21   // Uptrend with strong volume (favorable for bearish reversal)

//──────────────────────────────
// EXISTING PATTERNS (Updated with Standard Trend Logic)
//──────────────────────────────

// Hammer / Hanging Man
smallBody         = realBody <= candleRange * 0.3
longLowerShadow   = lowerShadow >= 2 * realBody
minimalUpperShadow= upperShadow <= realBody * 0.1
hammerShape       = smallBody and longLowerShadow and minimalUpperShadow

isHammer    = hammerShape and bullishTrend   // Bullish reversal in a downtrend
isHangingMan= hammerShape and bearishTrend   // Bearish reversal in an uptrend

if isHammer and hammerInput
    label.new(bar_index, low, "Hammer", xloc=xloc.bar_index, yloc=yloc.belowbar, style=label.style_label_up, color=color.green, textcolor=color.white)
if isHangingMan and hangingManInput
    label.new(bar_index, high, "Hanging Man", xloc=xloc.bar_index, yloc=yloc.abovebar, style=label.style_label_down, color=color.red, textcolor=color.white)

// Marubozu
isMarubozu = upperShadow <= candleRange * 0.05 and lowerShadow <= candleRange * 0.05
barcolor(marubozuInput and isMarubozu ? color.fuchsia : na)

// Engulfing
bullishEngulfing = close[1] < open[1] and close > open and open < close[1] and close > open[1] and bullishTrend
bearishEngulfing = close[1] > open[1] and close < open and open > close[1] and close < open[1] and bearishTrend

if bullishEngulfing and engulfingInput
    label.new(bar_index, low, "Engulfing", xloc=xloc.bar_index, yloc=yloc.belowbar, style=label.style_label_up, color=color.green, textcolor=color.white)
if bearishEngulfing and engulfingInput
    label.new(bar_index, high, "Engulfing", xloc=xloc.bar_index, yloc=yloc.abovebar, style=label.style_label_down, color=color.red, textcolor=color.white)

// Dark Cloud Cover
darkCloudCover = close[1] > open[1] and close < open and (close[1] - open[1]) > math.abs(close - open) and open > high[1] and close < close[1] and close > open[1] and close > low[1] and bearishTrend
if darkCloudCover and darkCloudCoverInput
    label.new(bar_index, high, "Dark Cloud Cover", xloc=xloc.bar_index, yloc=yloc.abovebar, style=label.style_label_down, color=color.red, textcolor=color.white)

// Piercing
isPiercing = close[1] < open[1] and close > open and (open[1] - close[1]) > math.abs(close - open) and open < low[1] and close < open[1] and close > close[1] and bullishTrend
if isPiercing and piercingInput
    label.new(bar_index, low, "Piercing", xloc=xloc.bar_index, yloc=yloc.belowbar, style=label.style_label_up, color=color.green, textcolor=color.white)

// Morning Star
msCandle1 = close[2] < open[2] and (open[2] - close[2]) > 0.5 * (high[2] - low[2])
msCandle2 = math.abs(close[1] - open[1]) < 0.3 * (high[1] - low[1]) and open[1] < close[2] and close[1] < close[2]
msCandle3 = close > open and open > close[1] and close > (open[2] + close[2]) / 2
isMorningStar = msCandle1 and msCandle2 and msCandle3 and bullishTrend
if morningStarInput and isMorningStar
    label.new(bar_index, high, "Morning Star", xloc=xloc.bar_index, yloc=yloc.abovebar, style=label.style_label_down, color=color.green, textcolor=color.white)

// Evening Star
esCandle1 = close[2] > open[2] and (close[2] - open[2]) > 0.5 * (high[2] - low[2])
esCandle2 = math.abs(close[1] - open[1]) < 0.3 * (high[1] - low[1]) and open[1] > close[2] and close[1] > close[2]
esCandle3 = close < open and open < close[1] and close < (open[2] + close[2]) / 2
isEveningStar = esCandle1 and esCandle2 and esCandle3 and bearishTrend
if eveningStarInput and isEveningStar
    label.new(bar_index, high, "Evening Star", xloc=xloc.bar_index, yloc=yloc.abovebar, style=label.style_label_down, color=color.red, textcolor=color.white)

// Shooting Star
isShootingStar = bearishTrend and realBody < candleRange * 0.3 and upperShadow >= 2 * realBody and lowerShadow < 0.1 * realBody
if shootingStarInput and isShootingStar
    label.new(bar_index, high, "Shooting Star", xloc=xloc.bar_index, yloc=yloc.abovebar, style=label.style_label_down, color=color.red, textcolor=color.white)

// Inverted Hammer
isInvertedHammer = bullishTrend and realBody < candleRange * 0.3 and upperShadow >= 2 * realBody and lowerShadow < 0.1 * realBody
if invertedHammerInput and isInvertedHammer
    label.new(bar_index, high, "Inverted Hammer", xloc=xloc.bar_index, yloc=yloc.abovebar, style=label.style_label_down, color=color.green, textcolor=color.white)

//──────────────────────────────
// NEW PATTERNS
//──────────────────────────────

// Bullish Harami
bullishHarami = close[1] < open[1] and close > open and open > close[1] and close < open[1] and bullishTrend
if bullishHarami and bullishHaramiInput
    label.new(bar_index, low, "Bullish Harami", xloc=xloc.bar_index, yloc=yloc.belowbar, style=label.style_label_up, color=color.green, textcolor=color.white)

// Bearish Harami
bearishHarami = close[1] > open[1] and close < open and open < close[1] and close > open[1] and bearishTrend
if bearishHarami and bearishHaramiInput
    label.new(bar_index, high, "Bearish Harami", xloc=xloc.bar_index, yloc=yloc.abovebar, style=label.style_label_down, color=color.red, textcolor=color.white)

// Tweezer Tops
tweezerTops = bearishTrend and math.abs(high - high[1]) < 0.05 * candleRange
if tweezerTops and tweezerTopsInput
    label.new(bar_index, high, "Tweezer Tops", xloc=xloc.bar_index, yloc=yloc.abovebar, style=label.style_label_down, color=color.red, textcolor=color.white)

// Tweezer Bottoms
tweezerBottoms = bullishTrend and math.abs(low - low[1]) < 0.05 * candleRange
if tweezerBottoms and tweezerBottomsInput
    label.new(bar_index, low, "Tweezer Bottoms", xloc=xloc.bar_index, yloc=yloc.belowbar, style=label.style_label_up, color=color.green, textcolor=color.white)

// Bullish Belt Hold
bullishBeltHold = bullishTrend and close > open and (open - low) < 0.05 * candleRange and upperShadow < 0.1 * realBody
if bullishBeltHold and bullishBeltHoldInput
    label.new(bar_index, low, "Bullish Belt Hold", xloc=xloc.bar_index, yloc=yloc.belowbar, style=label.style_label_up, color=color.green, textcolor=color.white)

// Bearish Belt Hold
bearishBeltHold = bearishTrend and close < open and (high - open) < 0.05 * candleRange and lowerShadow < 0.1 * realBody
if bearishBeltHold and bearishBeltHoldInput
    label.new(bar_index, high, "Bearish Belt Hold", xloc=xloc.bar_index, yloc=yloc.abovebar, style=label.style_label_down, color=color.red, textcolor=color.white)

// Upside Gap Two Crows
upsideGapTwoCrows = bearishTrend and close[2] > open[2] and close[1] < open[1] and close < open and open[1] > high[2] and close < close[2]
if upsideGapTwoCrows and upsideGapTwoCrowsInput
    label.new(bar_index, high, "Upside Gap Two Crows", xloc=xloc.bar_index, yloc=yloc.abovebar, style=label.style_label_down, color=color.red, textcolor=color.white)

// Three Black Crows
threeBlackCrows = bearishTrend and close[2] < open[2] and close[1] < open[1] and close < open and close < close[1] and close[1] < close[2]
if threeBlackCrows and threeBlackCrowsInput
    label.new(bar_index, high, "Three Black Crows", xloc=xloc.bar_index, yloc=yloc.abovebar, style=label.style_label_down, color=color.red, textcolor=color.white)

// Three Advancing White Soldiers
threeAdvWhiteSoldiers = bullishTrend and close[2] > open[2] and close[1] > open[1] and close > open and close > close[1] and close[1] > close[2]
if threeAdvWhiteSoldiers and threeAdvWhiteSoldiersInput
    label.new(bar_index, low, "Three Advancing White Soldiers", xloc=xloc.bar_index, yloc=yloc.belowbar, style=label.style_label_up, color=color.green, textcolor=color.white)

// Three Mountains
threeMountains = bearishTrend and math.abs(high - high[1]) < 0.03 * candleRange and math.abs(high[1] - high[2]) < 0.03 * candleRange
if threeMountains and threeMountainsInput
    label.new(bar_index, high, "Three Mountains", xloc=xloc.bar_index, yloc=yloc.abovebar, style=label.style_label_down, color=color.red, textcolor=color.white)

// Three Rivers
threeRivers = bullishTrend and math.abs(low - low[1]) < 0.03 * candleRange and math.abs(low[1] - low[2]) < 0.03 * candleRange
if threeRivers and threeRiversInput
    label.new(bar_index, low, "Three Rivers", xloc=xloc.bar_index, yloc=yloc.belowbar, style=label.style_label_up, color=color.green, textcolor=color.white)

// Counter Attack
counterAttack = math.abs(close - close[1]) < 0.05 * candleRange and ((close > open and close[1] < open[1]) or (close < open and close[1] > open[1]))
if counterAttack and counterAttackInput
    label.new(bar_index, close, "Counter Attack", xloc=xloc.bar_index, yloc=yloc.belowbar, style=label.style_label_up, color=close > open ? color.green : color.red, textcolor=color.white)

// Tower Top
towerTop = bearishTrend and close[1] > open[1] and close < open and open < close[1]
if towerTop and towerTopInput
    label.new(bar_index, high, "Tower Top", xloc=xloc.bar_index, yloc=yloc.abovebar, style=label.style_label_down, color=color.red, textcolor=color.white)

// Tower Bottoms
towerBottoms = bullishTrend and close[1] < open[1] and close > open and open > close[1]
if towerBottoms and towerBottomsInput
    label.new(bar_index, low, "Tower Bottoms", xloc=xloc.bar_index, yloc=yloc.belowbar, style=label.style_label_up, color=color.green, textcolor=color.white)
